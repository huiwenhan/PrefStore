admin_port = 9991
admin_http_port = 9990

host {
  id = 1
}

db_default {
  username = "$(DB_USERNAME)"
  password = "$(DB_PASSWORD)"
}

w3c_header_period = 60000

errors {
  deadlock_retries = 3
}

log {
  filename = "test.log"
  level = "info"
  roll = "hourly"
  truncate_stack_traces = 100

  w3c {
    node = "w3c"
    use_parents = false
    filename = "w3c.log"
    level = "info"
    roll = "hourly"
  }

  bad_jobs {
    node = "bad_jobs"
    use_parents = false
    filename = "bad_jobs.log"
    level = "info"
    roll = "never"
  }
}

throttled_log {
  period_msec = 60000
  rate = 10
}

rowz {
  timeout_msec = 100
  idle_timeout_sec = 60
  server_port = 7919
  shard_server_port = 7920
  job_server_port = 7921
  min_threads = 200

  w3c = [
    "action-timing",
    "db-timing",
    "connection-pool-release-timing",
    "connection-pool-reserve-timing",
    "kestrel-put-timing",
    "db-select-count",
    "db-execute-count",
    "job-success-count",
    "operation",
    "arguments"
  ]

  aggregate_jobs_page_size = 500

  db (inherit="db_default") {
    name = "rowz_data"

    connection_pool {
      max_wait = 20
      min_evictable_idle_msec = -1
      size_max = 10
      size_min = 5
      test_idle_msec = 1000
      test_on_borrow = false

      timeout {
        initialize = 1000
        open = 100
        pool_size = 10
        queue_size = 10000
      }
    }

    disable {
      error_count = 3
      seconds = 60
    }

    query_timeout_default = 2000
    queries {
    }
  }

  nameserver (inherit="db_default") {
    hostnames = ["localhost"]
    name = "rowz_nameserver"

    connection_pool {
      max_wait = 20
      min_evictable_idle_msec = -1
      size_max = 1
      size_min = 1
      test_idle_msec = 1000
      test_on_borrow = false

      timeout {
        initialize = 1000
        open = 100
        pool_size = 10
        queue_size = 10000
      }
    }
    query_timeout_default = 15000
    queries { }
  }

  replication {
    future {
      pool_size = 100
      max_pool_size = 100
      keep_alive_time_seconds = 5
      timeout_seconds = 6
    }
  }

  queue {
    path = "/tmp"
    journal off
    high {
      job_queue = "high"
      error_queue = "high_errors"
      threads = 1
      error_limit = 25
      replay_interval = 900
    }
    medium {
      job_queue = "medium"
      error_queue = "medium_errors"
      threads = 1
      error_limit = 25
      replay_interval = 900
    }
    low {
      job_queue = "low"
      error_queue = "low_errors"
      threads = 1
      error_limit = 25
      replay_interval = 900
    }
    max_memory_size = 36000000
  }
}